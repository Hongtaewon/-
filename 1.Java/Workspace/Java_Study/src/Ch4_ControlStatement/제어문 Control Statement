# 제어문 Control Statement
조건문과 반복문 Conditional And Loop Statements

#조건문
	if, switch
	if 구성 : 조건식의 결과는 참/거짓 중 하나여야 한다.
	if(조건식){
		//조건식이 참일 경우 수행될 문장
	}
	else{
		//조건식이 거짓일 경우 수행될 문장
	}
	
	switch 구성 : 조건식의 결과는 정수 또는 문자열이여야 한다.
				case문의 값은 정수 상수만 가능하며, 중복되지 않아야 한다.
	switch(조건식){
		case 값1 :
			// 조건식의 결과가 값1과 같을 경우 수행될 문장들
			break;
		case 값2 :
			// 조건식의 결과가 값2과 같을 경우 수행될 문장들
			break;
		default :
			// 조건식과 일치하는 case가 없을 때 수행될 문장들
	}
	
#반복문
	for, while, do-while
	for 구성
	for(초기화;조건식;증감식){
		// 조건식이 참일 경우 수행될 문장들
	}
	ex) for(int i=0;i<=5;i++)
	향상된 for 구성
	for( 타입 변수명 : 배열 또는 컬렉션){
		// 반복할 문장
	}
	ex) int arr[] = {10,20,30};
	for(int tmp : arr){
		System.out.println(tmp);
	}
	
	while 구성
	while(조건식){
		//조건식이 참일 경우 수행될 문장들
	}
	
	do-while 구성
	do{
		//처음은 수행되고 그 이후, 조건식에 따라 수행됨
	}while(조건식);
	
#break문
	반복문에서 break를 만나면 반복문은 가장 가까운 반복문을 벗어난다.
	보통 조건문과 같이 쓰여 특정 조건을 만족하면 반복문을 벗어나도록 한다.
#continue문
	반복문에서 continue를 만나면 반복문의 끝으로 이동하여 다음 반복문을 진행한다.
	반복문 자체를 벗어나는 것이 아닌 다음 반복문을 수행하기 때문에 break와 다르고,
	continue도 조건문과 쓰여 특정 조건을 만족하면 수행하도록 한다.
#이름 붙은 반복문
	여러개의 반복문이 중첩될 경우, break문으로 중첩 반복문을 완전히 벗어날 수 없다.
	이때는 중첩 반복문에 이름을 붙이고 break문과 continue문에 이름을 지정해 줌으로써
	하나 이상의 반복문을 벗어나거나 반복을 건너뛸 수 있다.