import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Deque;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class Main {
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		
		Deque<Integer> que = new LinkedList<>();
		
		for(int i = 0; i< n;i++)
		{
			st = new StringTokenizer(br.readLine());
			
			String order = st.nextToken();
			int num = 0;
			switch (order) {
			case "push_front":
				num = Integer.parseInt(st.nextToken());
				que.addFirst(num);
				break;
			case "push_back":
				num = Integer.parseInt(st.nextToken());
				que.addLast(num);
				break;
			case "pop_front":
				if(que.isEmpty())
					bw.write(-1+"\n");
				else
					bw.write(que.pollFirst()+"\n");
				break;
			case "pop_back":
				if(que.isEmpty())
					bw.write(-1+"\n");
				else
					bw.write(que.pollLast()+"\n");
				break;
			case "size":
				bw.write(que.size()+"\n");
				break;
			case "empty":
				if(que.isEmpty())
					bw.write(1+"\n");
				else
					bw.write(0+"\n");
				break;
			case "front":
				if(que.isEmpty())
					bw.write(-1+"\n");
				else
					bw.write(que.peekFirst()+"\n");
				break;
			case "back":
				if(que.isEmpty())
					bw.write(-1+"\n");
				else
					bw.write(que.peekLast()+"\n");
				break;
			}
			
		}
		
		bw.close();
	}
	
	
}