import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
import java.util.Vector;

public class Main {

	static int[][] map;
	static int n;
	static class axis{
		int x;
		int y;
		axis(int x,int y)
		{
			this.x = x;
			this.y = y;
		}
	}
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		

		StringTokenizer st = new StringTokenizer(br.readLine());
		
		n = Integer.parseInt(st.nextToken());
		

		map = new int[n][n];
		for(int i = 0;i<n;i++)
		{
			st = new StringTokenizer(br.readLine());
			for(int j = 0;j<n;j++)
			{
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		bfs(map, new int[n][n],0);
		
		bw.write(max+"\n");
		
		bw.flush();
	}
	
	static int max = 0;
	public static void bfs(int[][] tmap, int[][] calc,int cnt)
	{
		if(cnt == 5)
		{
			for(int i = 0;i<n;i++)
			{
				for(int j = 0;j<n;j++)
				{
					if(tmap[i][j] > max) max = tmap[i][j];
				}
			}
			return;
		}
		
		Queue<Integer> que = new LinkedList<>();
		//up
		for(int j = 0;j<n;j++)
		{
			for(int i = 0;i<n;i++)
			{
				if(tmap[i][j] != 0)
					que.add(tmap[i][j]);
			}
			int temp;
			int idx = 0;
			while(!que.isEmpty())
			{
				temp = que.poll();
				if(!que.isEmpty())
				{
					if(temp == que.peek())
					{
						calc[idx++][j] = temp * 2;
						que.poll();
					}
					else
					{
						calc[idx++][j] = temp;
					}
				}
				else
				{
					calc[idx++][j] = temp;
				}
			}
		}
		bfs(calc,new int[n][n],cnt+1);
		//down
		calc = new int[n][n];
		for(int j = 0;j<n;j++)
		{
			for(int i = n-1;i>=0;i--)
			{
				if(tmap[i][j] != 0)
					que.add(tmap[i][j]);
			}
			int temp;
			int idx = n-1;
			while(!que.isEmpty())
			{
				temp = que.poll();
				if(!que.isEmpty())
				{
					if(temp == que.peek())
					{
						calc[idx--][j] = temp * 2;
						que.poll();
					}
					else
					{
						calc[idx--][j] = temp;
					}
				}
				else
				{
					calc[idx--][j] = temp;
				}
			}
		}
		bfs(calc,new int[n][n],cnt+1);
		//left
		calc = new int[n][n];
		for(int i = 0;i<n;i++)
		{
			for(int j = 0;j<n;j++)
			{
				if(tmap[i][j] != 0)
					que.add(tmap[i][j]);
			}
			int temp;
			int idx = 0;
			while(!que.isEmpty())
			{
				temp = que.poll();
				if(!que.isEmpty())
				{
					if(temp == que.peek())
					{
						calc[i][idx++] = temp * 2;
						que.poll();
					}
					else
					{
						calc[i][idx++] = temp;
					}
				}
				else
				{
					calc[i][idx++] = temp;
				}
			}
		}
		bfs(calc,new int[n][n],cnt+1);
		//right
		calc = new int[n][n];
		for(int i = 0;i<n;i++)
		{
			for(int j = n-1;j>=0;j--)
			{
				if(tmap[i][j] != 0)
					que.add(tmap[i][j]);
			}
			int temp;
			int idx = n-1;
			while(!que.isEmpty())
			{
				temp = que.poll();
				if(!que.isEmpty())
				{
					if(temp == que.peek())
					{
						calc[i][idx--] = temp * 2;
						que.poll();
					}
					else
					{
						calc[i][idx--] = temp;
					}
				}
				else
				{
					calc[i][idx--] = temp;
				}
			}
		}
		bfs(calc,new int[n][n],cnt+1);
	}
}