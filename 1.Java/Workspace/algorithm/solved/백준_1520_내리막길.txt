import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

//DP + DFS
//메모이제이션을 사용해야한다.
//메모이제이션에 대해 더 이해가 필요함.
public class Main {

	static int[][] map;
	static int[][] visited;
	static int[][] d = {
			{1,0},
			{-1,0},
			{0,1},
			{0,-1}
	};
	static int n,m;
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		map = new int[n][m];
		visited = new int[n][m];
		for(int i = 0;i<n;i++)
		{
			st = new StringTokenizer(br.readLine());
			for(int j = 0;j<m;j++)
			{
				map[i][j] = Integer.parseInt(st.nextToken());
				visited[i][j] = -1;
			}
		}
		
		
		bw.write(dfs(0,0)+"\n");
		
		bw.flush();
	}
	static class axis{
		int x;
		int y;
		axis(int x,int y)
		{
			this.x = x;
			this.y = y;
		}
	}
	public static int dfs(int x,int y)
	{
		if(x == n-1 && y == m-1)
			return 1;
		
		if(visited[x][y] == -1)
		{
			visited[x][y] = 0;
			int tx,ty;
			for(int i = 0;i<4;i++)
			{
				tx = x + d[i][0];
				ty = y + d[i][1];
				
				if(tx >= n|| ty >= m || tx < 0 || ty < 0) continue;
				
				if(map[tx][ty] < map[x][y])
				{
					visited[x][y] += dfs(tx,ty);
				}
			}
		}
		
		return visited[x][y];
	}
}