import java.io.*;
import java.util.*;

//구슬탈출1,2,3,4는 로직이 같기 때문에 하나만 풀면 모두 풀 수 있음.

class Main {
	
	static int n,m;
	static char[][] map;
	static class axis {
		int x;
		int y;
		int cnt = 0;
		String order ="";
		public axis(int x,int y)
		{
			this.x = x;
			this.y = y;
		}
		public axis(int x,int y,int cnt,String s)
		{
			this.x = x;
			this.y = y;
			this.cnt = cnt;
			this.order = this.order + s;
		}
	}
	static int[][] d = {
			{-1,0},
			{0,1},
			{1,0},
			{0,-1}
	};
	
	static String result = "";
	static Queue<axis> r = new LinkedList<>();
	static Queue<axis> b = new LinkedList<>();
	static axis o;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		map = new char[n][m];

		for(int i = 0 ;i<n;i++)
		{
			st = new StringTokenizer(br.readLine());
			String temp = st.nextToken();
			for(int j = 0;j<m;j++)
			{
				if(temp.charAt(j) == 'R')
					r.add((new axis(i,j)));
				if(temp.charAt(j) == 'B')
					b.add((new axis(i,j)));
				if(temp.charAt(j) == 'O')
					o = new axis(i,j);
				map[i][j] = temp.charAt(j);
			}
		}
		
		
		
		System.out.println(BFS());
		if(!result.equals(""))
			System.out.println(result);
		
	}
	public static int BFS() {
		
		int cnt = 0;
		int temp = 9999;
		while(!r.isEmpty())
		{
			axis rr = r.poll();
			axis bb = b.poll(); 
			
			int rx = rr.x,ry = rr.y;
			int bx = bb.x,by = bb.y;
			Rchecker.add(rr);
			Bchecker.add(bb);
			cnt = rr.cnt;
			String tempS = rr.order;
			if(cnt >= 10) continue;
			for(int i = 0;i<4;i++)
			{
				int Rtx = rx + d[i][0];
				int Rty = ry + d[i][1];
				int Btx = bx + d[i][0];
				int Bty = by + d[i][1];
				
				axis tR = move(Rtx,Rty,i);
				axis tB = move(Btx,Bty,i);
				
				if(tB.x == o.x && tB.y == o.y) continue;
				
				if(checker(tR, tB)) continue;
				if(rx == tR.x && ry == tR.y && bx == tB.x && by == tB.y) continue;
				
				String save = "";
				if(i == 0) save = "U";
				else if(i == 1) save = "R";
				else if(i == 2) save = "D";
				else if(i == 3) save = "L";
				
				if(tR.x == o.x && tR.y == o.y) {
					
					if(tB.x == o.x && tB.y == o.y) continue;
					
					if(temp > cnt+1)
					{
						temp = cnt+1;
						result = tempS + save;
					}
				}
				
				//구슬이 같은 위치인 경우 하나를 뒤로 뺀다.
				if(tR.x == tB.x && tR.y == tB.y)
				{
					if(rx == bx)
					{
						if(ry > by)
						{
							if(i == 1) tB.y -= d[i][1];
							else tR.y -= d[i][1];
						}
						else
						{
							if(i == 1) tR.y -= d[i][1];
							else tB.y -= d[i][1];
						}
					}
					else if(ry == by)
					{
						if(rx > bx)
						{
							if(i == 2) tB.x -= d[i][0];
							else tR.x -= d[i][0];
						}
						else
						{
							if(i == 2) tR.x -= d[i][0];
							else tB.x -= d[i][0];
						}
					}
				}
				
				if(checker(tR, tB)) continue;
				if(rx == tR.x && ry == tR.y && bx == tB.x && by == tB.y) continue;
				
				
				Rchecker.add(tR);
				Bchecker.add(tB);
				r.add(new axis(tR.x,tR.y,cnt+1,tempS + save));
				b.add(new axis(tB.x,tB.y));
				
			}
		
		}
		if(temp == 9999) temp = -1;
		return temp;
	}
	
	static public axis move(int x,int y,int i)
	{
		while(true) {
			if(map[x][y] == 'O') return new axis(x,y);
			if(map[x][y] == '#')
			{
				x = x - d[i][0];
				y = y - d[i][1];
				return new axis(x,y);
			}
			
			x = x + d[i][0];
			y = y + d[i][1];
		}
	}
	
	static Vector<axis> Rchecker = new Vector<>();
	static Vector<axis> Bchecker = new Vector<>();
	
	static public boolean checker(axis r,axis b)
	{
		for(int i = 0;i< Rchecker.size();i++)
		{
			if((Rchecker.get(i).x == r.x && Rchecker.get(i).y == r.y &&
					Bchecker.get(i).x == b.x && Bchecker.get(i).y == b.y))
				return true;
		}
		return false;
	}
}