////////////////////////////////////////
//java

import java.io.*;
import java.util.*;

public class Main {

	static int n,m;
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		long[] arr = new long[n];
		long hi = 0;
		
		for(int i = 0;i<n;i++)
		{
			int temp = Integer.parseInt(br.readLine());
			hi = hi > temp ? hi : temp;
			arr[i] = temp;
		}
		
		long lo = 1;
		while(lo <= hi)
		{
			long mid = (hi + lo) / 2;
			long cnt = 0;
			for(int i = 0;i< n;i++)
			{
				cnt += (arr[i] / mid);
			}
			if (m > cnt) hi = mid - 1;
			else if (m  <= cnt) lo = mid + 1;
				
		}
		
		bw.write(hi+"\n");
		bw.flush();
	}
}

////////////////////////////////////////
//C++

#pragma warning(disable:4996)
#include <cstdio>
#include <iostream>
#include <algorithm>
using namespace std;

int K, N;
unsigned int a[10100];
unsigned int start, last, mid;
int temp, cnt;

int main(void)
{
	int i;
	scanf("%d %d", &K, &N);
	for (i = 0; i < K; i++)
	{
		scanf("%d", &a[i]);
	}
	start = 1;
	sort(a, a + K);
	last = a[K-1];

	while (start <= last)
	{
		mid = (last - start) / 2 + start;
		for (i = 0; i < K; i++)
		{
			temp = a[i] / mid;
			cnt += temp;
		}

		if (cnt >= N) start = mid + 1;
		else if(cnt < N) last = mid - 1;
		cnt = 0;
	}
	printf("%d\n",last);
}