import java.io.*;
import java.util.*;

public class Main {

	static int n,m,s,e;
	static class node implements Comparable<node>{
		int end;
		int weight;
		node(int end,int weight)
		{
			this.end = end;
			this.weight = weight;
		}
		
		@Override
	    public int compareTo(node o) {
	        return weight - o.weight;
	    }
	}
	static List<node>[] list;
	static int[] dist;
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = null;
		n = Integer.parseInt(br.readLine());
		m = Integer.parseInt(br.readLine());
		
		list = new ArrayList[n+1];
		dist = new int[n+1];
		Arrays.fill(dist, Integer.MAX_VALUE);
		
		for(int i = 1;i<=n;i++)
		{
			list[i] = new ArrayList<>();
		}
		for(int i = 0;i< m;i++)
		{
			st = new StringTokenizer(br.readLine());
			
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());
			list[u].add(new node(v, w));
		}
		st = new StringTokenizer(br.readLine());

		s = Integer.parseInt(st.nextToken());
		e = Integer.parseInt(st.nextToken());
		dijkstra(s);
		
		
		bw.write(dist[e]+"\n");	
		
		bw.flush();
	}
	
	public static void dijkstra(int start)
	{
		PriorityQueue<node> que = new PriorityQueue<>();
		boolean[] visited = new boolean[n+1];
		
		que.add(new node(start, 0));
		dist[start] = 0;
		
		while(!que.isEmpty())
		{
			node temp = que.poll();
			int now = temp.end;
			if(visited[now]== true) 
				continue;
			visited[now]= true;
			
			for(node n : list[now])
			{
				if(dist[n.end] > dist[now] + n.weight)
				{
					dist[n.end] = dist[now] + n.weight;
					que.add(new node(n.end, dist[n.end]));
				}
			}
		}
	}
}