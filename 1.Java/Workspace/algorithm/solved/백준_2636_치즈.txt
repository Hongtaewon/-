import java.io.*;
import java.util.*;

public class Main {

	static int[][] d = {
			{0,1},
			{1,0},
			{0,-1},
			{-1,0}
	};
	
	static class axis{
		int x;
		int y;
		axis(int x,int y)
		{
			this.x = x;
			this.y = y;
		}
	}
	
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static int[][] map;
	static int cnt = 0;
	static int n,m;
	public static void main(String[] args) throws Exception {
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		map = new int[n][m];
		
		for(int i = 0;i<n;i++)
		{
			st = new StringTokenizer(br.readLine());
			for(int j = 0;j<m;j++)
			{
				int temp = Integer.parseInt(st.nextToken());
				map[i][j] = temp;
				if(temp == 1)
					cnt++;
			}
		}
		
		map[0][0] = 2;
		int day = 0;
		find(0,0,day+2);
		day++;
		while(cnt-que.size() != 0)
		{
			cnt = cnt- que.size();
			while(!que.isEmpty())
			{
				que.poll();
			}
			find(0,0,day+2);
			day++;
		}
		
		
		bw.write(day+"\n"+cnt);
		
		bw.flush();
	}
	
	static Queue<axis> que = new LinkedList<>();
	
	public static void find(int x,int y,int day)
	{
		
		for(int i = 0;i< 4;i++)
		{
			int tx = x + d[i][0];
			int ty = y + d[i][1];
			
			if(tx >=n || ty >= m || tx < 0 || ty < 0) continue;
			
			if(map[tx][ty] == 1)
			{
				map[tx][ty] = day;
				que.add(new axis(tx,ty));
			}
			else if(map[tx][ty] != day)
			{
				map[tx][ty] = day;
				find(tx,ty,day);
			}
		}
	}
}