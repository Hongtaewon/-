import java.io.*;
import java.util.*;

public class Main {

	static int[][] d = {
			{0,1},
			{1,0},
			{0,-1},
			{-1,0}
	};
	
	static class axis{
		int x;
		int y;
		axis(int x,int y)
		{
			this.x = x;
			this.y = y;
		}
	}
	
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static int[][] map;
	static int cnt = 0;
	static int n,m;
	
	static Queue<axis> water = new LinkedList<>();
	static Queue<axis> que = new LinkedList<>();
	
	public static void main(String[] args) throws Exception {
	
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		map = new int[n][m];
		for(int i = 0;i<n;i++)
		{
			String temp = br.readLine();
			for(int j = 0;j<m;j++)
			{
				char c = temp.charAt(j);
				map[i][j] = 0;
				
				if(c == 'D')
					map[i][j] = 1;
				else if(c == 'S')
				{
					map[i][j] = 2;
					que.add(new axis(i,j));
				}
				else if(c == '*')
				{
					map[i][j] = -1;
					water.add(new axis(i,j));	
				}
				else if(c == 'X')
					map[i][j] = 3;
			}
		}
		
		int cnt = 0;
		boolean flag = false;
		while(true)
		{

			water();
			
			cnt++;
			if(que.size() == 0)
			{
				flag = true;
				break;
			}
			if(find())
				break;
			
		}
		
		if(flag)
			bw.write("KAKTUS\n");
		else
			bw.write(cnt+"\n");
		
		bw.flush();
	}
	
	public static boolean find() 
	{
		Queue<axis> tque = new LinkedList<>();
		
		while(!que.isEmpty())
		{
			axis now = que.poll();
			
			for(int i = 0;i<4;i++)
			{
				int tx = now.x + d[i][0];
				int ty = now.y + d[i][1];
				
				if(tx >= n || ty >= m || tx < 0 || ty < 0) continue;
				
				if(map[tx][ty] == 1)
					return true;
				else if(map[tx][ty] == 0)
				{
					map[tx][ty] = 2;
					tque.add(new axis(tx,ty));
				}
			}
		}
		que = tque;
		return false;
	}
	
	public static void water() 
	{
		Queue<axis> twater = new LinkedList<>();
		
		while(!water.isEmpty())
		{
			axis now = water.poll();
			
			for(int i = 0;i<4;i++)
			{
				int tx = now.x + d[i][0];
				int ty = now.y + d[i][1];
				
				if(tx >= n || ty >= m || tx < 0 || ty < 0) continue;
				
				if(map[tx][ty] != 1 && map[tx][ty] != 3 && map[tx][ty] != -1)
				{
					map[tx][ty] = -1;
					twater.add(new axis(tx,ty));
				}
			}
		}

		water = twater;
	}
}