import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	
	static class axis{
		int x;
		int y;
		
		public axis(int x,int y)
		{
			this.x = x;
			this.y = y;
		}
	}
	
	static int[][] d = {
			{-1,0},
			{0,1},
			{1,0},
			{0,-1}
	};
	
	static char[][] map;
	static boolean[][] visited;
	static int r,c;
	static axis[] swan = new axis[2];
	static Queue<axis> que = new LinkedList<>();
	static Queue<axis> water = new LinkedList<>();
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		r = Integer.parseInt(st.nextToken());
		c = Integer.parseInt(st.nextToken());
		
		map = new char[r][c];
		visited = new boolean[r][c];
		int cnt=0;
		for(int i = 0;i<r;i++)
		{
			st = new StringTokenizer(br.readLine());
			String temp = st.nextToken();
			for(int j = 0; j<c;j++)
			{
				char temp1 = temp.charAt(j);
				if(temp1 == 'L')
				{
					swan[cnt++] = new axis(i,j);
				}
				
				if(temp1 != 'X')
				{
					water.add(new axis(i,j));
				}
				map[i][j] = temp1;
			}
		}
		
		que.add(swan[0]);
		
		int result = time(0);
		
		System.out.println(result);
	}
	
	public static int time(int cnt)
	{

		visited[swan[0].x][swan[0].y] = true;
		
		while(true)
		{
			
			if(search())
				break;
			
			melt();
			
			cnt++;

		}
		return cnt;
		
	}
	
	public static void melt()
	{
		
		int size = water.size();
		
		for(int i = 0;i<size;i++)
		{
			axis a = water.poll();
			
			int tx,ty;
			for(int k=0;k<4;k++)
			{
				tx = a.x + d[k][0];
				ty = a.y + d[k][1];
				
				if(tx >= r || ty >= c || tx < 0 || ty < 0) continue;
				
				if(map[tx][ty] == 'X')
				{
					map[tx][ty] = '.';
					water.offer(new axis(tx, ty));
				}
			}
		}
	}
	
	static boolean flag = false;
	public static boolean search()
	{
		int tx,ty;
		Queue<axis> tque = new LinkedList<>();
		
		while(!que.isEmpty())
		{
			
			axis temp = que.poll();
			
			if(temp.x == swan[1].x && temp.y == swan[1].y) {
				flag = true;
				break;
			}
			
			for(int i = 0;i<4;i++)
			{
				tx = temp.x + d[i][0];
				ty = temp.y + d[i][1];
				
				if(tx >= r || ty >= c || tx < 0 || ty < 0 || visited[tx][ty] == true) continue;
				
				visited[tx][ty] = true;
				
				if(map[tx][ty] == 'X')
				{
					tque.offer(new axis(tx,ty));
				}
				else
				{
					que.offer(new axis(tx,ty));
				}
			}
		}
		
		que = tque;
		
		return flag;
	}
	
}