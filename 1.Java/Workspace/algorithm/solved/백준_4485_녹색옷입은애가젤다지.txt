import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int[][] map;
	static int[][] visited;
	static int[][] d = {
			{1,0},
			{-1,0},
			{0,1},
			{0,-1}
	};
	static int n;
	static class axis{
		int x;
		int y;
		axis(int x,int y)
		{
			this.x = x;
			this.y = y;
		}
	}
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int cnt = 1;
		while(true)
		{
			StringTokenizer st = new StringTokenizer(br.readLine());
			
			n = Integer.parseInt(st.nextToken());
			
			if(n == 0) break;
			
			map = new int[n][n];
			visited = new int[n][n];
			for(int i = 0;i<n;i++)
			{
				st = new StringTokenizer(br.readLine());
				for(int j = 0;j<n;j++)
				{
					map[i][j] = Integer.parseInt(st.nextToken());
					visited[i][j] = 999999999;
				}
			}
			que.add(new axis(0,0));
			visited[0][0] = map[0][0];
			bfs();
			
			bw.write("Problem "+cnt+": "+visited[n-1][n-1]+"\n");
			cnt++;
		}
		
		bw.flush();
	}
	static Queue<axis> que = new LinkedList<>();
	
	public static void bfs()
	{
	
		while(!que.isEmpty())
		{
			int tx,ty;
			axis temp = que.poll();
			for(int i = 0;i<4;i++)
			{
				tx = temp.x + d[i][0];
				ty = temp.y + d[i][1];
				
				if(tx >= n|| ty >= n || tx < 0 || ty < 0) continue;
				
				if(visited[tx][ty] > visited[temp.x][temp.y] + map[tx][ty])
				{
					visited[tx][ty] = visited[temp.x][temp.y] + map[tx][ty];
					que.add(new axis(tx,ty));
				}
			}
		}

	}
}